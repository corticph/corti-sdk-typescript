/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Corti from "../../../index.js";
import * as serializers from "../../../../serialization/index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Interactions {
    export interface Options {
        environment: core.Supplier<environments.CortiEnvironment | environments.CortiEnvironmentUrls>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token?: core.Supplier<core.BearerToken | undefined>;
        /** Override the Tenant-Name header */
        tenantName: core.Supplier<string>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Override the Tenant-Name header */
        tenantName?: string;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Interactions {
    protected readonly _options: Interactions.Options;

    constructor(_options: Interactions.Options) {
        this._options = _options;
    }

    /**
     *  Lists all existing interactions. Results can be filtered by encounter status and patient identifier.
     *
     * @param {Corti.GetInteractionsRequest} request
     * @param {Interactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.interactions.listAllInteractions()
     */
    public async listAllInteractions(
        request: Corti.GetInteractionsRequest = {},
        requestOptions?: Interactions.RequestOptions,
    ): Promise<core.Page<Corti.InteractionsListResponseInteractionsItem>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Corti.GetInteractionsRequest,
            ): Promise<core.WithRawResponse<Corti.InteractionsListResponse>> => {
                const { sort, direction, pageSize, index, encounterStatus, patient } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (sort !== undefined) {
                    _queryParams["sort"] = sort;
                }
                if (direction !== undefined) {
                    _queryParams["direction"] = serializers.CommonSortingDirectionEnum.jsonOrThrow(direction, {
                        unrecognizedObjectKeys: "strip",
                        omitUndefined: true,
                    });
                }
                if (pageSize !== undefined) {
                    _queryParams["pageSize"] = pageSize?.toString() ?? null;
                }
                if (index !== undefined) {
                    _queryParams["index"] = index?.toString() ?? null;
                }
                if (encounterStatus != null) {
                    if (Array.isArray(encounterStatus)) {
                        _queryParams["encounterStatus"] = encounterStatus.map((item) =>
                            serializers.InteractionsEncounterStatusEnum.jsonOrThrow(item, {
                                unrecognizedObjectKeys: "strip",
                                omitUndefined: true,
                            }),
                        );
                    } else {
                        _queryParams["encounterStatus"] = serializers.InteractionsEncounterStatusEnum.jsonOrThrow(
                            encounterStatus,
                            { unrecognizedObjectKeys: "strip", omitUndefined: true },
                        );
                    }
                }
                if (patient !== undefined) {
                    _queryParams["patient"] = patient;
                }
                const _response = await core.fetcher({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)).base,
                        "interactions/",
                    ),
                    method: "GET",
                    headers: mergeHeaders(
                        this._options?.headers,
                        mergeOnlyDefinedHeaders({
                            Authorization: await this._getAuthorizationHeader(),
                            "Tenant-Name": requestOptions?.tenantName,
                        }),
                        requestOptions?.headers,
                    ),
                    queryParameters: _queryParams,
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: serializers.InteractionsListResponse.parseOrThrow(_response.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 403:
                            throw new Corti.ForbiddenError(
                                serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    skipValidation: true,
                                    breadcrumbsPrefix: ["response"],
                                }),
                                _response.rawResponse,
                            );
                        case 504:
                            throw new Corti.GatewayTimeoutError(
                                serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                                    unrecognizedObjectKeys: "passthrough",
                                    allowUnrecognizedUnionMembers: true,
                                    allowUnrecognizedEnumValues: true,
                                    skipValidation: true,
                                    breadcrumbsPrefix: ["response"],
                                }),
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.CortiError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.CortiError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /interactions/.");
                    case "unknown":
                        throw new errors.CortiError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.index != null ? request?.index : 1;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<Corti.InteractionsListResponse, Corti.InteractionsListResponseInteractionsItem>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.interactions ?? []).length > 0,
            getItems: (response) => response?.interactions ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "index", _offset));
            },
        });
    }

    /**
     *  Creates a new interaction.
     *
     * @param {Corti.InteractionsCreateRequest} request
     * @param {Interactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.BadRequestError}
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.InternalServerError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.interactions.createInteraction({
     *         encounter: {
     *             identifier: "identifier",
     *             status: "planned",
     *             type: "first_consultation"
     *         }
     *     })
     */
    public createInteraction(
        request: Corti.InteractionsCreateRequest,
        requestOptions?: Interactions.RequestOptions,
    ): core.HttpResponsePromise<Corti.InteractionsCreateResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createInteraction(request, requestOptions));
    }

    private async __createInteraction(
        request: Corti.InteractionsCreateRequest,
        requestOptions?: Interactions.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.InteractionsCreateResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                "interactions/",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.InteractionsCreateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.InteractionsCreateResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Corti.BadRequestError(_response.error.body, _response.rawResponse);
                case 403:
                    throw new Corti.ForbiddenError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 500:
                    throw new Corti.InternalServerError(_response.error.body, _response.rawResponse);
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling POST /interactions/.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Retrieves a previously recorded interaction by its unique identifier (interaction ID).
     *
     * @param {string} id - The unique identifier of the interaction to retrieve. Must be a valid UUID.
     * @param {Interactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.interactions.getExistingInteraction("id")
     */
    public getExistingInteraction(
        id: string,
        requestOptions?: Interactions.RequestOptions,
    ): core.HttpResponsePromise<Corti.InteractionsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getExistingInteraction(id, requestOptions));
    }

    private async __getExistingInteraction(
        id: string,
        requestOptions?: Interactions.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.InteractionsGetResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.InteractionsGetResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Corti.ForbiddenError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling GET /interactions/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Deletes an existing interaction.
     *
     * @param {string} id - The unique identifier of the interaction to delete. Must be a valid UUID.
     * @param {Interactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.interactions.deleteInteraction("id")
     */
    public deleteInteraction(id: string, requestOptions?: Interactions.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__deleteInteraction(id, requestOptions));
    }

    private async __deleteInteraction(
        id: string,
        requestOptions?: Interactions.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Corti.ForbiddenError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling DELETE /interactions/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     *  Modifies an existing interaction by updating specific fields without overwriting the entire record.
     *
     * @param {string} id - The unique identifier of the interaction to update. Must be a valid UUID.
     * @param {Corti.InteractionsUpdateRequest} request
     * @param {Interactions.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Corti.ForbiddenError}
     * @throws {@link Corti.GatewayTimeoutError}
     *
     * @example
     *     await client.interactions.updateInteraction("id")
     */
    public updateInteraction(
        id: string,
        request: Corti.InteractionsUpdateRequest = {},
        requestOptions?: Interactions.RequestOptions,
    ): core.HttpResponsePromise<Corti.InteractionsGetResponse> {
        return core.HttpResponsePromise.fromPromise(this.__updateInteraction(id, request, requestOptions));
    }

    private async __updateInteraction(
        id: string,
        request: Corti.InteractionsUpdateRequest = {},
        requestOptions?: Interactions.RequestOptions,
    ): Promise<core.WithRawResponse<Corti.InteractionsGetResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)).base,
                `interactions/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    "Tenant-Name": requestOptions?.tenantName,
                }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: serializers.InteractionsUpdateRequest.jsonOrThrow(request, {
                unrecognizedObjectKeys: "strip",
                omitUndefined: true,
            }),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: serializers.InteractionsGetResponse.parseOrThrow(_response.body, {
                    unrecognizedObjectKeys: "passthrough",
                    allowUnrecognizedUnionMembers: true,
                    allowUnrecognizedEnumValues: true,
                    skipValidation: true,
                    breadcrumbsPrefix: ["response"],
                }),
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 403:
                    throw new Corti.ForbiddenError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                case 504:
                    throw new Corti.GatewayTimeoutError(
                        serializers.ErrorResponse.parseOrThrow(_response.error.body, {
                            unrecognizedObjectKeys: "passthrough",
                            allowUnrecognizedUnionMembers: true,
                            allowUnrecognizedEnumValues: true,
                            skipValidation: true,
                            breadcrumbsPrefix: ["response"],
                        }),
                        _response.rawResponse,
                    );
                default:
                    throw new errors.CortiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.CortiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.CortiTimeoutError("Timeout exceeded when calling PATCH /interactions/{id}.");
            case "unknown":
                throw new errors.CortiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string | undefined> {
        const bearer = await core.Supplier.get(this._options.token);
        if (bearer != null) {
            return `Bearer ${bearer}`;
        }

        return undefined;
    }
}
